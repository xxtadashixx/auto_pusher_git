import os
import subprocess
from pathlib import Path

def run_command(command, check=True, cwd=None):
    """Ex√©cute une commande shell et g√®re les erreurs"""
    try:
        result = subprocess.run(command, shell=True, text=True,
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                              cwd=cwd)
        if check and result.returncode != 0:
            print(f"‚ùå Erreur: {result.stderr.strip()}")
            return None
        return result.stdout.strip()
    except Exception as e:
        print(f"‚ùå Exception: {str(e)}")
        return None

def branch_exists(branch_name, repo_path):
    """V√©rifie si une branche existe localement"""
    branches = run_command("git branch --list", cwd=repo_path)
    return branches and branch_name in branches.split("\n")

def remote_exists(repo_path):
    """V√©rifie si le remote origin est configur√©"""
    remotes = run_command("git remote", cwd=repo_path)
    return remotes and "origin" in remotes.split("\n")

def get_current_branch(repo_path):
    """R√©cup√®re la branche actuelle"""
    return run_command("git branch --show-current", cwd=repo_path)

def switch_to_main_branch(repo_path):
    """Bascule vers la branche main/master ou en cr√©e une si n√©cessaire"""
    # V√©rifie d'abord si main existe
    if run_command("git show-ref --verify refs/heads/main", cwd=repo_path, check=False):
        return run_command("git checkout main", cwd=repo_path) is not None
    
    # Sinon v√©rifie master
    if run_command("git show-ref --verify refs/heads/master", cwd=repo_path, check=False):
        return run_command("git checkout master", cwd=repo_path) is not None
    
    # Sinon cr√©e main
    print("‚ÑπÔ∏è Cr√©ation de la branche main...")
    if (run_command("git checkout --orphan main", cwd=repo_path) is not None and
        run_command("git rm -rf .", cwd=repo_path, check=False) is not None and
        run_command("git commit --allow-empty -m 'Initial commit'", cwd=repo_path) is not None):
        return True
    
    return False

def delete_branch(branch_name, repo_path):
    """Supprime une branche locale de mani√®re s√©curis√©e"""
    current_branch = get_current_branch(repo_path)
    if current_branch is None:
        return False
    
    if current_branch == branch_name:
        print(f"‚ö†Ô∏è Vous √™tes sur la branche √† supprimer. Basculement vers main...")
        if not switch_to_main_branch(repo_path):
            return False
    
    if run_command(f"git branch -D {branch_name}", cwd=repo_path) is None:
        return False
    
    print(f"‚úÖ Branche '{branch_name}' supprim√©e")
    return True

def initialize_repo(repo_path):
    """Initialise un nouveau d√©p√¥t Git"""
    if run_command("git init", cwd=repo_path) is None:
        return False
    
    # Cr√©e un premier commit vide
    os.chdir(repo_path)
    with open("README.md", "w") as f:
        f.write("# Nouveau projet\n")
    
    if (run_command("git add README.md", cwd=repo_path) is not None and
        run_command("git commit -m 'Initial commit'", cwd=repo_path) is not None):
        return True
    return False

def add_files(repo_path):
    """G√®re l'ajout des fichiers au staging"""
    specific_path = input("‚ûï Chemin sp√©cifique (ou Entr√©e pour tout ajouter) : ").strip()
    if specific_path:
        full_path = os.path.join(repo_path, specific_path)
        if not os.path.exists(full_path):
            print(f"‚ùå Chemin invalide: {specific_path}")
            return False
        return run_command(f"git add {specific_path}", cwd=repo_path) is not None
    else:
        return run_command("git add .", cwd=repo_path) is not None

def create_commit(repo_path):
    """Cr√©e un nouveau commit"""
    while True:
        commit_msg = input("üìù Message de commit : ").strip()
        if commit_msg:
            break
        print("‚ùå Le message ne peut pas √™tre vide")
    
    return run_command(f'git commit -m "{commit_msg}"', cwd=repo_path) is not None

def push_to_main(repo_path):
    """Pousse les changements sur la branche main"""
    # Force la branche main si elle n'existe pas
    if not branch_exists("main", repo_path):
        run_command("git branch -M main", cwd=repo_path)
    
    if not remote_exists(repo_path):
        remote_url = input("üîó URL du d√©p√¥t distant : ").strip()
        if not remote_url.startswith(("http", "git@")):
            print("‚ùå URL invalide. Doit commencer par http://, https:// ou git@")
            return False
        if run_command(f"git remote add origin {remote_url}", cwd=repo_path) is None:
            return False
    
    return run_command("git push -u origin main", cwd=repo_path) is not None

def handle_existing_branch(branch_name, repo_path):
    """G√®re le cas o√π la branche existe d√©j√†"""
    print(f"‚ö†Ô∏è La branche '{branch_name}' existe d√©j√†.")
    print("1) Supprimer et recr√©er\n2) Utiliser cette branche\n3) Annuler")
    
    while True:
        choice = input("Choix (1/2/3) : ").strip()
        if choice == "1":
            if not delete_branch(branch_name, repo_path):
                return False
            return run_command(f"git checkout -b {branch_name}", cwd=repo_path) is not None
        elif choice == "2":
            return run_command(f"git checkout {branch_name}", cwd=repo_path) is not None
        elif choice == "3":
            return None  # Signale l'annulation
        print("‚ùå Choix invalide")

def push_to_new_branch(repo_path):
    """Pousse les changements sur une nouvelle branche"""
    while True:
        branch_name = input("üå± Nom de la nouvelle branche : ").strip()
        if branch_name:
            break
        print("‚ùå Le nom ne peut pas √™tre vide")
    
    # Gestion de la branche existante
    if branch_exists(branch_name, repo_path):
        result = handle_existing_branch(branch_name, repo_path)
        if result is None:  # Annulation
            return False
        if not result:  # √âchec
            return False
    else:
        if run_command(f"git checkout -b {branch_name}", cwd=repo_path) is None:
            return False
    
    # Configuration du remote si n√©cessaire
    if not remote_exists(repo_path):
        remote_url = input("üîó URL du d√©p√¥t distant : ").strip()
        if not remote_url.startswith(("http", "git@")):
            print("‚ùå URL invalide")
            return False
        if run_command(f"git remote add origin {remote_url}", cwd=repo_path) is None:
            return False
    
    # Confirmation du push
    confirm = input(f"üöÄ Pousser sur '{branch_name}' ? (o/n) : ").lower()
    if confirm != 'o':
        print("‚èπÔ∏è Push annul√©")
        return True  # Consid√©r√© comme succ√®s sans push
    
    return run_command(f"git push -u origin {branch_name}", cwd=repo_path) is not None

def main():
    print("\nüéâ Bienvenue dans AutoPusher v2.0 üöÄ\n")

    # 1. S√©lection du r√©pertoire
    while True:
        repo_path = input("üìÅ Chemin du dossier : ").strip()
        if os.path.isdir(repo_path):
            break
        print("‚ùå Dossier introuvable")
    
    try:
        repo_path = os.path.abspath(repo_path)
        os.chdir(repo_path)
        print(f"üìÇ Dossier : {repo_path}")
    except Exception as e:
        print(f"‚ùå Erreur d'acc√®s : {e}")
        return

    # 2. Initialisation Git si n√©cessaire
    if not os.path.exists(os.path.join(repo_path, ".git")):
        if input("üîß Initialiser un d√©p√¥t Git ? (o/n) : ").lower() == 'o':
            if not initialize_repo(repo_path):
                print("‚ùå √âchec de l'initialisation")
                return
            print("‚úÖ D√©p√¥t initialis√©")
        else:
            print("‚ùå Ce n'est pas un d√©p√¥t Git")
            return

    # 3. Ajout des fichiers
    if not add_files(repo_path):
        print("‚ùå √âchec de l'ajout des fichiers")
        return

    # 4. Cr√©ation du commit
    if not create_commit(repo_path):
        print("‚ùå √âchec du commit")
        return

    # 5. Choix du push
    print("\nüåø Options de push :")
    print("1) Pusher sur main")
    print("2) Cr√©er une nouvelle branche")
    
    while True:
        choice = input("Votre choix (1/2) : ").strip()
        if choice in ("1", "2"):
            break
        print("‚ùå Choix invalide")
    
    success = False
    if choice == "1":
        success = push_to_main(repo_path)
        if success:
            print("\n‚úÖ Push sur main r√©ussi!")
    else:
        success = push_to_new_branch(repo_path)
        if success:
            print("\n‚úÖ Push sur la nouvelle branche r√©ussi!")
    
    if not success:
        print("\n‚ùå √âchec de l'op√©ration")
    else:
        print("\nüéâ Op√©ration termin√©e avec succ√®s!")

if __name__ == "__main__":
    main()